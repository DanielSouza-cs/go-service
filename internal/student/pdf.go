package student

import (
	"bytes"
	"fmt"
	"strconv"
	"time"

	"github.com/go-pdf/fpdf"
)

const (
	fontArial    = "Arial"
	styleBold    = "B"
	styleItalic  = "I"
	styleRegular = ""
	dateFormat   = "02 January 2006"
)

func BuildReport(s *Student) ([]byte, error) {
	pdf := fpdf.New("P", "mm", "A4", "")
	pdf.SetTitle(fmt.Sprintf("Student %d Report", s.ID), false)
	pdf.AddPage()

	pdf.SetFont(fontArial, styleBold, 18)
	pdf.Cell(0, 12, "Student Report")
	pdf.Ln(15)

	addLine := func(label, value string) {
		if value != "" && value != "N/A" {
			pdf.SetFont(fontArial, styleBold, 12)
			pdf.Cell(45, 8, label)
			pdf.SetFont(fontArial, styleRegular, 12)
			pdf.MultiCell(0, 8, value, "", "", false)
			pdf.Ln(2)
		}
	}
	ptrStr := func(p *string) string {
		if p != nil {
			return *p
		}
		return "N/A"
	}

	addLine("ID:", strconv.FormatInt(s.ID, 10))
	addLine("Name:", s.Name)
	addLine("Email:", s.Email)
	addLine("Phone:", s.Phone)
	if s.DOB != nil {
		addLine("Date of Birth:", s.DOB.Format(dateFormat))
	}
	addLine("Class:", ptrStr(s.Class))
	addLine("Section:", ptrStr(s.Section))
	addLine("Roll:", ptrStr(s.Roll))
	addLine("Father's Name:", ptrStr(s.FatherName))

	pdf.Ln(10)
	pdf.SetFont(fontArial, styleItalic, 9)
	footerText := fmt.Sprintf("Report generated by go-service on %s", time.Now().Format(time.RFC1123))
	pdf.Cell(0, 6, footerText)

	var buf bytes.Buffer
	if err := pdf.Output(&buf); err != nil {
		return nil, fmt.Errorf("failed to write PDF to buffer: %w", err)
	}
	return buf.Bytes(), nil
}
